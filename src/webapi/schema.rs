use super::{commands, connectors, events, replies, traits::ObjectType};
use schemars::{schema_for, JsonSchema};
use std::collections::HashMap;

pub fn make_schema() -> HashMap<&'static str, schemars::schema::RootSchema> {
    let mut hm = HashMap::<&str, schemars::schema::RootSchema>::new();
    //commands
    hm.insert(
        commands::route::GetRoute::get_type_name(),
        schema_for!(commands::route::GetRoute),
    );
    hm.insert(
        commands::route::AddRoute::get_type_name(),
        schema_for!(commands::route::AddRoute),
    );
    hm.insert(
        commands::route::RemoveRoute::get_type_name(),
        schema_for!(commands::route::RemoveRoute),
    );
    hm.insert(
        commands::route::GetServiceCommand::get_type_name(),
        schema_for!(commands::route::GetServiceCommand),
    );
    hm.insert(
        commands::route::GetServiceEvent::get_type_name(),
        schema_for!(commands::route::GetServiceEvent),
    );
    hm.insert(
        commands::route::GetServiceSubscription::get_type_name(),
        schema_for!(commands::route::GetServiceSubscription),
    );
    hm.insert(
        commands::route::GetService::get_type_name(),
        schema_for!(commands::route::GetService),
    );
    //replies
    hm.insert(
        replies::common::StandardReply::get_type_name(),
        schema_for!(replies::common::StandardReply),
    );
    hm.insert(
        replies::common::AddIntIdsReply::get_type_name(),
        schema_for!(replies::common::AddIntIdsReply),
    );
    hm.insert(
        replies::common::AddStrIdsReply::get_type_name(),
        schema_for!(replies::common::AddStrIdsReply),
    );
    hm.insert(
        replies::route::GetRouteReply::get_type_name(),
        schema_for!(replies::route::GetRouteReply),
    );
    hm.insert(
        replies::route::GetServiceCommandReply::get_type_name(),
        schema_for!(replies::route::GetServiceCommandReply),
    );
    hm.insert(
        replies::route::GetServiceEventReply::get_type_name(),
        schema_for!(replies::route::GetServiceEventReply),
    );
    hm.insert(
        replies::route::GetServiceSubscriptionReply::get_type_name(),
        schema_for!(replies::route::GetServiceSubscriptionReply),
    );
    hm.insert(
        replies::route::GetServiceReply::get_type_name(),
        schema_for!(replies::route::GetServiceReply),
    );
    //events
    hm.insert(
        events::route::OnServiceUnavailable::get_type_name(),
        schema_for!(events::route::OnServiceUnavailable),
    );
    hm.insert(
        events::route::OnRouteUpdate::get_type_name(),
        schema_for!(events::route::OnRouteUpdate),
    );
    hm
}
